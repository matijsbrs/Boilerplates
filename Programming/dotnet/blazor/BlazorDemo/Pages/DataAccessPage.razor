@page "/dataaccesspage"
@using DataLibrary
@using BlazorDemo.Models
@inject IDataAccess _data
@inject IConfiguration _config

<PageTitle>Data Access</PageTitle>



<h1>Data Access demo</h1>

<p>This component demonstrates fetching data from a service.</p>


<button class="btn btn-primary" @onclick="Download_History">Load history</button>
<button class="btn btn-primary" @onclick="Clear_History">Clear history</button>

@if (_meterstanden == null)
{
    <p><em>No data</em></p>
}
else
{
    <table class="table" id="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>KW Laag</th>
                <th>KW Hoog</th>
                <th>KW Som</th>
                <th>M3 Gas</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _meterstanden)
            {
                <tr>
                    <td>@forecast.TimeStamp.ToShortDateString()</td>
                    <td>@forecast.KWh1</td>
                    <td>@forecast.KWh2</td>
                    <td>@forecast.KWhSum</td>
                    <td>@forecast.m3gas</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Meterstanden>? _meterstanden;

    @* protected override async Task OnInitializedAsync() 
    {
        string sql = "select * from Meterstanden";
        string conn = _config.GetConnectionString("DefaultConnection");
        _meterstanden = await _data.LoadData<Meterstanden, dynamic>(sql, new {}, conn);
    } *@

    private async Task Clear_History() {
        _meterstanden = null;
    }

    private async Task Download_History() {
        string sql = "select * from Meterstanden";
        string conn = _config.GetConnectionString("Default");
        _meterstanden = await _data.LoadData<Meterstanden, dynamic>(sql, new {}, conn);
        
    }
}
